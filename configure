#!/usr/bin/env gosh
;; Configuring Gauche-gl
;; Run ./configure (or gosh ./configure) to generate Makefiles.

(use gauche.configure)

;; glut
;; The actual library name depends on the platform, so we set a dummy
;; value here, and later substitute them.
(define *use-glut* #t)
(define *glut-path* #f)
(cf-arg-with 'glut
             (cf-help-string
              "--with-glut[=yes|no|PATH]"
              "Use GLUT library installed under PATH. \
  By default, Gauche-gl assumes GLUT is installed in the system standard \
  location.  If you do not want to use GLUT support, specify --with-glut=no.")
             (^[val]
               (rxmatch-case val
                 [#/^no$/  (_) (set! *use-glut* #f)]
                 [#/^yes$/ (_) (set! *use-glut* #t)]
                 [else (set! *glut-path* val)])))

;; glfw
;; we'll check availability later, so we just record the option value.
(define *use-glfw* 'check)
(define *glfw-path* #f)
(cf-arg-with 'glfw
             (cf-help-string
              "--with-glfw[=PATH]"
              "Use GLFW library installed under PATH. \
  By default, the availability of GLFW in the system default location is \
  checked.  If you do not want to use GLFW support, specify --with-glfw=no.")
             (^[val]
               (rxmatch-case val
                 [#/^no$/  (_) (set! *use-glfw* #f)]
                 [#/^yes$/ (_) (set! *use-glfw* #t)]
                 [else (set! *use-glfw* #t)
                       (set! *glfw-path* val)])))

;; cg
(cf-arg-enable 'cg
               (cf-help-string
                "--enable-cg"
                "Enable NVidia's Cg binding.")
               (^_
                (cf-define 'HAVE_CG)
                (cf-subst 'ENABLE_CG 1)
                (cf-subst 'CG_LIBS "-lCgCL -lCg")
                (cf-subst 'CG_SCM "cg/gl/cg.scm"))
               (^[]
                (cf-subst 'ENABLE_CG "")
                (cf-subst 'CG_LIBS "")
                (cf-subst 'CG_SCM "")))

;; Initialize configure.  This creates the global context, parses
;; command-line args and sets up default values.
(cf-init-gauche-extension)

;; MinGW (MSYS2) detection
(define *mingw-target* (#/.*-mingw.*/ (cf$ 'target)))

;; Check target-dependent glut library
(cond [*use-glut*
       (cond [*mingw-target*
              (cf-subst 'GLUT_LIB "-Wl,-Bstatic -lfreeglut -Wl,-Bdynamic -lgdi32 -lwinmm")
              (cf-subst 'GLUT_INCDIR "-DFREEGLUT_STATIC")
              (cf-subst 'GLUT_LIBDIR "")]
             [else
              (cf-subst 'GLUT_LIB "-lglut")
              (if *glut-path*
                (begin (cf-subst 'GLUT_INCDIR #"-I~|*glut-path*|/include")
                       (cf-subst 'GLUT_LIBDIR #"-L~|*glut-path*|/lib"))
                (begin (cf-subst 'GLUT_INCDIR "")
                       (cf-subst 'GLUT_LIBDIR "")))])]
      [else
       (cf-subst 'GLUT_LIB "")
       (cf-subst 'GLUT_INCDIR "")
       (cf-subst 'GLUT_LIBDIR "")])

;; Set appropriate libraries
(cf-check-headers '("GL/glx.h")
                  :if-found
                  (^_
                   (cf-subst 'GL_LIBS "-lGLU -lGL -lX11 -lXext")
                   (cf-subst-append 'GLUT_LIB "-lXmu -lXi")))
(cf-check-headers '("GLUT/glut.h")        ; darwin on MacOSX
                  :if-found
                  (^_
                   (cf-subst-append 'CFLAGS "-DMacOSX=1")
                   (cf-subst 'GL_LIBS "-framework OpenGL -framework GLUT")
                   (cf-subst 'GLUT_LIB "-framework GLUT")))

;; Link opengl libs
(unless (cf-ref 'GL_LIBS #f)
  (cond [*mingw-target*
         (cf-subst 'GL_LIBS "-lglu32 -lopengl32 -lgdi32 -luser32 -lkernel32")]
        [else
         (cf-subst 'GL_LIBS "-lGLU -lGL")]))

;; Check GLFW availability
(when *use-glfw*
  (when *glfw-path*
    (cf-subst-append 'CPPFLAGS #"-I~|*glfw-path*|/include")
    (cf-subst-append 'LDFLAGS #"-L~|*glfw-path*|/lib"))
  (cf-check-headers '("GLFW/glfw3.h"))
  (when (cf-defined? 'HAVE_GLFW_GLFW3_H)
    (cond [*mingw-target*
           (cf-subst-prepend 'LIBS "-Wl,-Bstatic -lglfw3 -Wl,-Bdynamic")
           (cf-define 'HAVE_LIBGLFW)]
          [else
           (when (cf-search-libs "glfwInit" '("glfw" "glfw3"))
             (cf-define 'HAVE_LIBGLFW))])))

(cond [(and (cf-defined? 'HAVE_GLFW_GLFW3_H)
            (cf-defined? 'HAVE_LIBGLFW))
       (cf-subst 'USE_GLFW_yes "")
       (cf-subst 'USE_GLFW_no "#")]
      [(eq? *use-glfw* #t)
       (cf-msg-error "Can't find glfw library.  Aborting...")]
      [else
       (cf-subst 'USE_GLFW_yes "#")
       (cf-subst 'USE_GLFW_no "")])

(cond [*glfw-path*
       (cf-subst 'GLFW_INCDIR #"~|*glfw-path*|/include")
       (cf-subst 'GLFW_LIBDIR #"~|*glfw-path*|/lib")]
      [else
       (cf-subst 'GLFW_INCDIR "")
       (cf-subst 'GLFW_LIBDIR "")])

;; Check Vulkan availiability
(cf-check-headers '("vulkan/vulkan.h"))
(cf-check-lib "vulkan" "vkCreateInstance")
(cond [(and (cf-defined? 'HAVE_VULKAN_VULKAN_H)
            (cf-defined? 'HAVE_LIBVULKAN))
       (cf-subst 'USE_VULKAN_yes "")
       (cf-subst 'USE_VULKAN_no "#")]
      [else
       (cf-subst 'USE_VULKAN_yes "#")
       (cf-subst 'USE_VULKAN_no "")])

;; On MinGW, we use GLEW so that we can get newer GL features; the GL header
;; comes with MinGW installation is very old.
;; TODO: We might add --with-glew configure option so that we can use glew
;; on other platforms.  At this moment, though, Gauche-gl has its own
;; runtime name lookup system, so having glew isn't vital on other platforms.
(cond [*mingw-target*
       (cf-define 'HAVE_GL_GLEW_H)
       (cf-subst 'GLEW_CFLAGS "-DGLEW_STATIC")
       (cf-subst 'GLEW_LIB    "-Wl,-Bstatic -lglew32 -Wl,-Bdynamic")]
      [else
       (cf-subst 'GLEW_CFLAGS "")
       (cf-subst 'GLEW_LIB    "")])

;; Check for other programs.
(cf-check-prog 'MAKEINFO "makeinfo" :default "")
(cf-check-prog 'GZIP_PROGRAM "gzip" :default "")

;; On Windows, we need several extra -l flags.
(cond [*mingw-target*
       (cf-subst 'GL_EXTRALIBS "-L. -lgauche-math3d")
       (cf-subst 'GLUT_EXTRALIBS "-L. -lgauche-gl -lgauche-math3d")
       (cf-subst 'GLFW_EXTRALIBS "-L. -lgauche-gl -lgauche-math3d")]
      [else
       (cf-subst 'GL_EXTRALIBS "")
       (cf-subst 'GLUT_EXTRALIBS "")
       (cf-subst 'GLFW_EXTRALIBS "")])

;; Output
(cf-config-headers "src/gauche/gl-config.h")
(cf-output-default)

;; Local variables:
;; mode: scheme
;; end:
